"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

// Generated by CoffeeScript 2.7.0
// lib.cs.misc - Check the status of code repositories under a root directory.
// Copyright (C) 2016 Dario Giovannetti <dev@dariogiovannetti.net>
// This file is part of lib.cs.misc.
// lib.cs.misc is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// lib.cs.misc is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// You should have received a copy of the GNU General Public License
// along with lib.cs.misc.  If not, see <http://www.gnu.org/licenses/>.
var $,
    datetime,
    h,
    indexOf = [].indexOf;
$ = require('jquery');
h = require('hyperscript');
datetime = require('./datetime');

module.exports.Choice = function (options, selected, props) {
  var i, len, opt, option, select, text, val;
  select = h('select', props);

  for (i = 0, len = options.length; i < len; i++) {
    opt = options[i];

    if (Array.isArray(opt)) {
      var _opt = opt;

      var _opt2 = _slicedToArray(_opt, 2);

      text = _opt2[0];
      val = _opt2[1];
    } else {
      text = val = opt;
    }

    option = h('option', {
      value: val
    }, text);

    if (val === selected) {
      option.selected = true;
    }

    select.appendChild(option);
  }

  return select;
};

module.exports.Multichoice = function (legend, items, checked, attributes) {
  var fieldset, i, input, item, len;
  fieldset = $('<fieldset>').append($('<legend>').text(legend)).attr(attributes);

  for (i = 0, len = items.length; i < len; i++) {
    item = items[i];
    input = $('<input>').val(item).attr({
      'type': 'checkbox'
    }).attr(attributes);

    if (indexOf.call(checked, item) >= 0) {
      input.attr('checked', '');
    }

    fieldset.append($('<div>').append(item, input));
  }

  return fieldset;
};

module.exports.WeekDaySelector = /*#__PURE__*/function () {
  function WeekDaySelector(selected_days, baseid) {
    var radio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    _classCallCheck(this, WeekDaySelector);

    var i, id, index, input, len, name, ref, wday;
    this.container = $('<span>').addClass('weekdayselector');
    ref = datetime.WEEKDAYS_SHORT;

    for (index = i = 0, len = ref.length; i < len; index = ++i) {
      wday = ref[index];
      id = "".concat(baseid, "-").concat(index);
      name = "".concat(baseid);
      input = $('<input>').attr({
        'type': radio ? 'radio' : 'checkbox',
        'name': name,
        'id': id
      }).val(index).appendTo(this.container);

      if (selected_days.indexOf(index) > -1) {
        input.prop("checked", true);
      }

      $('<label>').attr('for', id).text(wday).appendTo(this.container);
    }
  }

  _createClass(WeekDaySelector, [{
    key: "get_days",
    value: function get_days() {
      var days, i, input, len, ref;
      days = [];
      ref = this.container.children('input');

      for (i = 0, len = ref.length; i < len; i++) {
        input = ref[i];

        if (input.checked) {
          days.push(input.value);
        }
      }

      return days;
    }
  }]);

  return WeekDaySelector;
}();