"use strict";

// Generated by CoffeeScript 2.7.0
// JavaScript auxiliary library
// Copyright (C) 2012 Dario Giovannetti <dev@dariogiovannetti.net>
// This file is part of JavaScript auxiliary library.
// JavaScript auxiliary library is free software: you can redistribute it
// and/or modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation, either version 3
// of the License, or (at your option) any later version.
// JavaScript auxiliary library is distributed in the hope that it will be
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// You should have received a copy of the GNU General Public License
// along with JavaScript auxiliary library.
// If not, see <http://www.gnu.org/licenses/>.
if (typeof GM_xmlhttpRequest === "undefined" || GM_xmlhttpRequest === null) {
  window.GM_xmlhttpRequest = function () {
    var header, req; // This function emulates GM_xmlhttpRequest only partially
    // Notably cross-origin requests are not supported
    // params = {
    //     method: ,
    //     url: ,
    //     data: ,
    //     headers: ,
    //     user: ,
    //     password: ,
    //     onload: ,
    //     onerror: ,
    //     onreadystatechange: ,
    //     // Not yet implemented
    //     //binary: ,
    //     //mozBackgroundRequest: ,
    //     //overrideMimeType: ,
    //     //ignoreCache: ,
    //     //ignoreRedirect: ,
    //     //ignoreTempRedirect: ,
    //     //ignorePermanentRedirect: ,
    //     //failOnRedirect: ,
    //     //redirectionLimit: ,
    // }

    if (params.method == null) {
      params.method = "GET";
    }

    if (params.data == null) {
      params.data = null;
    }

    if (params.headers == null) {
      params.headers = {};
    }

    if (params.user == null) {
      params.user = null;
    }

    if (params.password == null) {
      params.password = null;
    }

    if (params.onload == null) {
      params.onload = function (req) {};
    }

    if (params.onerror == null) {
      params.onerror = function (req) {};
    }

    if (params.onreadystatechange == null) {
      params.onreadystatechange = function (req) {};
    }

    params.async = true;
    req = new XMLHttpRequest();
    req.open(params.method, params.url, params.async, params.user, params.password);

    for (header in params.headers) {
      req.setRequestHeader(header, params.headers[header]);
    }

    req.onreadystatechange = function () {
      var err, response;
      response = {
        responseText: req.responseText,
        readyState: req.readyState,
        responseHeaders: req.getAllResponseHeaders(),
        status: req.status,
        statusText: req.statusText
      };

      try {
        // Not yet implemented
        //finalUrl: ,
        response.responseJSON = JSON.parse(req.responseText);
      } catch (error) {
        err = error;
        response.responseJSON = void 0;
      }

      params.onreadystatechange(response);

      if (req.readyState === 4) {
        if (req.status === 200) {
          return params.onload(response);
        } else {
          return params.onerror(response);
        }
      }
    };

    req.send(params.data);
    return {
      abort: function abort() {
        return req.abort();
      }
    };
  };
}